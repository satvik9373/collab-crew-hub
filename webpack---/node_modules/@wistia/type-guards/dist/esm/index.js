"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hasKey = exports.isError = exports.isVoid = exports.isNotBoolean = exports.isBoolean = exports.isNotFunction = exports.isFunction = exports.isNonEmptyArray = exports.isEmptyArray = exports.isNotArray = exports.isArray = exports.isNonEmptyRecord = exports.isEmptyRecord = exports.isRecord = exports.isInteger = exports.isNaN = exports.isNotNumber = exports.isNumber = exports.isNonEmptyString = exports.isEmptyString = exports.isNotString = exports.isString = exports.isNotNil = exports.isNil = exports.isNotUndefined = exports.isUndefined = exports.isNotNull = exports.isNull = void 0;
const isNull = (x) => x === null;
exports.isNull = isNull;
const isNotNull = (x) => !(0, exports.isNull)(x);
exports.isNotNull = isNotNull;
const isUndefined = (x) => x === undefined;
exports.isUndefined = isUndefined;
const isNotUndefined = (x) => !(0, exports.isUndefined)(x);
exports.isNotUndefined = isNotUndefined;
const isNil = (x) => (0, exports.isNull)(x) || (0, exports.isUndefined)(x);
exports.isNil = isNil;
const isNotNil = (x) => !(0, exports.isNil)(x);
exports.isNotNil = isNotNil;
const isString = (x) => typeof x === 'string';
exports.isString = isString;
const isNotString = (x) => !(0, exports.isString)(x);
exports.isNotString = isNotString;
const isEmptyString = (x) => (0, exports.isString)(x) && x === '';
exports.isEmptyString = isEmptyString;
const isNonEmptyString = (x) => (0, exports.isString)(x) && !(0, exports.isEmptyString)(x);
exports.isNonEmptyString = isNonEmptyString;
const isNumber = (x) => typeof x === 'number';
exports.isNumber = isNumber;
const isNotNumber = (x) => !(0, exports.isNumber)(x);
exports.isNotNumber = isNotNumber;
const isNaN = (x) => Number.isNaN(x);
exports.isNaN = isNaN;
const isInteger = (x) => Number.isInteger(x);
exports.isInteger = isInteger;
const isRecord = (x) => (0, exports.isNotNil)(x) && typeof x === 'object' && !(x instanceof Array);
exports.isRecord = isRecord;
const isEmptyRecord = (x) => (0, exports.isRecord)(x) && Object.keys(x).length === 0;
exports.isEmptyRecord = isEmptyRecord;
const isNonEmptyRecord = (x) => (0, exports.isRecord)(x) && Object.keys(x).length > 0;
exports.isNonEmptyRecord = isNonEmptyRecord;
const isArray = (x) => (0, exports.isNotNil)(x) && typeof x === 'object' && x instanceof Array;
exports.isArray = isArray;
const isNotArray = (x) => !(0, exports.isArray)(x);
exports.isNotArray = isNotArray;
const isEmptyArray = (x) => (0, exports.isArray)(x) && x.length === 0;
exports.isEmptyArray = isEmptyArray;
const isNonEmptyArray = (x) => (0, exports.isArray)(x) && x.length > 0;
exports.isNonEmptyArray = isNonEmptyArray;
const isFunction = (x) => (0, exports.isNotNil)(x) && typeof x === 'function';
exports.isFunction = isFunction;
const isNotFunction = (x) => !(0, exports.isFunction)(x);
exports.isNotFunction = isNotFunction;
const isBoolean = (x) => (0, exports.isNotNil)(x) && typeof x === 'boolean';
exports.isBoolean = isBoolean;
const isNotBoolean = (x) => !(0, exports.isBoolean)(x);
exports.isNotBoolean = isNotBoolean;
// eslint-disable-next-line no-void
const isVoid = (x) => x === void 0;
exports.isVoid = isVoid;
const isError = (error) => {
    return (0, exports.isNotNil)(error) && error instanceof Error;
};
exports.isError = isError;
/**
 * Curried function that tests if an input is an object
 * _and_ that a key that was passed in is a property of that object
 *
 * @param key - The key to test if it is a property of the input record
 * @returns A function that takes an unknown input and then tests if the
 *  input is an object and whether the key is a property of that object or not
 */
const hasKey = (x, key) => (0, exports.isNonEmptyRecord)(x) && key in x;
exports.hasKey = hasKey;